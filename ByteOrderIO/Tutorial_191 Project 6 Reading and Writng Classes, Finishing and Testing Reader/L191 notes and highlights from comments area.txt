/*
In the previous lesson we mad a public abstract class and renamed it to BaseIO, then created an enumerator to hold our Big and Little Endians, then created a
protected variable to hold whichever data, from the Big or Little Endian, depending on which 0ne we are using then we will be worked on the reader class, of this 
reader/ writer, then added our system IO namespace to out ByteIO.cs.  We will also added our summary, which we should have done, in the previous lesson, as all of
our constructors will have in this project.  After that we, continued in our reader class, by adding different data types of integer bytes, to read and a method 
to bytes, even though bytes are read in bigendian, not to be confused with byte.  Then we wrote a method to close our reader, and another to reverse the byte order
of whatever the user has loaded, to either big or little endian, then we read the bytes in a string determined by the user requested length.string.  We then read 
unicode, as bytes and used the encoder to render it as big endian, or unicode, which is the same as little endian.
In this lesson we will continue, with read a char and chars as bytes.
*/



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace ByteOrderIO
{
    /// <summary>
    /// The position to read at
    /// </summary>
    // L187 Reader class
    public class Reader : BaseIO
    {
        /// <summary>
        /// Create a reader, to read a file
        /// </summary>
        /// <param name="path">The path to the file, to read</param>
        // L187 create constructor using 'ctor' TAB 2x
        // pass thru the path to the file to be read, pas thru path
        public Reader(string path)
        {
            // L187 set binary reader to the path of the file to be opened and read
            br = new BinaryReader(File.OpenRead(path));

            // L187 set the Byteorder to BigEndian, using Reader class BaseIO
            this.Byteorder = byteorder.BigEndian;
        }
        /// <summary>
        /// Create a reader, to read a file
        /// </summary>
        /// <param name="path">The path to the file, to read</param>
        /// <param name="boBO">The order of the bytes, to read</param>
        // L187 constructor to pass tru our Byteorder along with path
        public Reader(string path, byteorder boBO)
        {
            // L187 set binary reader to the path of the file to be opened and read
            br = new BinaryReader(File.OpenRead(path));

            // L187 set are Byteorder to passed in byteorder
            this.Byteorder = boBO;
        }

        // L187 binary reader created
        BinaryReader br;

        // L187 property to hold position of binary reader
        public long Position
        {
            // L187 returns current position of binary reader
            get { return br.BaseStream.Position; }

            // L187 change Position depending on the current position value
            set { br.BaseStream.Position = value; }
        }

        /// <summary>
        /// Read byte, return Position, advance one, to next byte
        /// </summary>
        /// <returns></returns>
        // L188 read data type, byte, advance one , then go to the following byte, and return Position
        public byte ReadByte()
        {
            return br.ReadByte();
        }
        /// <summary>
        /// Read signed byte, return its Position, advance one, to next byte
        /// </summary>
        /// <returns></returns>
        // L188 read data type, signed byte, advance one , then go to the following signed byte, and return Position
        public sbyte ReadSByte()
        {
            return (sbyte)br.ReadByte();
        }

        /// <summary>
        /// Read short (int16) byte, return its Position, advance one byte, to next short
        /// </summary>
        /// <returns></returns>
        // L188 read data type, short (int16) byte, advance one , then go to the following short, and return Position
        public short ReadInt16()
        {
            short myShort = br.ReadInt16();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myShort);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myShort = BitConverter.ToInt16(buffer, 0);
            }
            return myShort;
        }

        /// <summary>
        /// Read ushort (UInt16) byte, return its Position, advance one byte, to next ushort
        /// </summary>
        /// <returns></returns>
        // L188 read data type, ushort (UInt16) byte, advance one , then go to the following ushort, and return Position
        public ushort ReadUint16()
        {
            ushort myUshort = br.ReadUInt16();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myUshort);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myUshort = BitConverter.ToUInt16(buffer, 0);
            }
            return myUshort;
        }

        /// <summary>
        /// Read int (int32) byte, return its Position, advance one byte, to next int byte
        /// </summary>
        /// <returns></returns>
        // L188 read data type, int (int32) byte, advance one , then go to the following int byte, and return Position
        public int ReadInt32()
        {
            int myInt = br.ReadInt32();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myInt);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myInt = BitConverter.ToInt32(buffer, 0);
            }
            return myInt;
        }

        /// <summary>
        /// Read uint (UInt32) byte, return its Position, advance one byte, to next uint byte
        /// </summary>
        /// <returns></returns>
        // L188 read data type, uint (UInt32) byte, advance one , then go to the following uint byte, and return Position
        public uint ReadUInt32()
        {
            uint myUint = br.ReadUInt32();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myUint);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myUint = BitConverter.ToUInt32(buffer, 0);
            }
            return myUint;
        }

        /// <summary>
        /// Read long (int64) byte, return its Position, advance one byte, to next byte long
        /// </summary>
        /// <returns></returns>
        // L188 read data type, long (int64) byte, advance one , then go to the following long, and return its Position
        public long Readint64()
        {
            long myLong = br.ReadInt64();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myLong);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myLong = BitConverter.ToInt64(buffer, 0);
            }
            return myLong;
        }

        /// <summary>
        /// Read ulong (Uint64) byte, return its Position, advance one byte, to next byte ulong
        /// </summary>
        /// <returns></returns>
        // L188 read data type, ulong (Uint64) byte, advance one , then go to the following ulong, and return its Position
        public ulong ReadUint64()
        {
            ulong myUlong = br.ReadUInt64();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myUlong);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myUlong = BitConverter.ToUInt64(buffer, 0);
            }
            return myUlong;
        }

        /// <summary>
        /// Read user specified bytes, return bytes array Position, advance one byte, to next bytes
        /// </summary>
        /// <returns></returns>
        // L189 read data type, byte[], read amount passed tru by user , then go to the following bytes, and return the Position
        // if bytes byteorder are in littlendian tranform to bigendian
        public byte[] ReadBytes(int amount)
        {
            byte[] buffer = br.ReadBytes(amount);
            if (Byteorder == byteorder.LittleEndian)
            {
                Array.Reverse(buffer);
            }
            return buffer;
        }

        // L189 close the reader method
        public void closeReader()
        {
            br.Close();
        }

        /// <summary>
        /// User chooses the byteorder, BigEndian or LittleEndian
        /// </summary>
        /// <param name="bo"></param>
        // L189 chang byte order from big to little endian or visa versa, 
        public void changeByteOrder(byteorder bo)
        {
            // L189 in this class not the BaseIO class
            this.Byteorder = bo;
        }

        /// <summary>
        /// pass thru user defined length, return chars as a string
        /// </summary>
        /// <param name="iLength"></param>
        /// <returns></returns>
        // L190 read bytes in string by its length
        public string ReadString(int iLength)
        {
            // L190 read the chars in the string
            return new string(br.ReadChars(iLength));
        }

        /// <summary>
        /// user requested length of bytes to read as string, then encode as big endian or little endian (unicode is in little endian)
        /// </summary>
        /// <param name="iLength"></param>
        /// <returns></returns>
        // L190 read user requested length, in bytes and return a unicode string
        public string ReadUnicodeString(int iLength)
        {
            // L190 if it is a bigendian get the bytes as a string and use encoding to return it as bigendian
            if (Byteorder == byteorder.BigEndian)
                return Encoding.BigEndianUnicode.GetString(br.ReadBytes(iLength));
            else 
                // L190 return it in littleEnding unicode, which is unicode, default name and structure, for little endian
                return Encoding.Unicode.GetString(br.ReadBytes(iLength));        
        }



/*
First we will read a byte from a char, then return the byte.  A single char, byte order, is not likely to ever be, in a little endian, do to the nature of it
being a single character.
*/


		/// <summary>
        /// read char byte at current position, advance one
        /// </summary>
        /// <returns></returns>
        // L191 read char byte at its current position
        public char ReadChar()
        {
            return br.ReadChar();
        }



/*
Next, we will read chars, which will be an array, and return the amount of chars requested byt the user.  Character, are also seldomly written backward, in 
little endian, because of the nature in which they are used and read.
*/


        /// <summary>
        /// read chars in an array, using Amount requested by user
        /// </summary>
        /// <param name="iAmount"></param>
        /// <returns></returns>
        // L191 read chars in an array, using iAmount requested by user
        public char[] ReadCharacterss(int iAmount)
        {
            return br.ReadChars(iAmount);
        }
	}

    // L186 rename class
    //class ByteIO
    public abstract class BaseIO
    {
        /// <summary>
        /// The order of the bytes, both read and written
        /// </summary>
        // L186 holds the big and little endian read and write
        public enum byteorder
        {
            BigEndian,
            LittleEndian
        }
        // L186 protected variable to store big or little endian data, depending which one we use
        // used in this class or its derived class
        protected byteorder Byteorder;
    }
}



/*
Now, that we have completed our reader class, we will add a button to form1, to test that this all works.  First add in the namespace, at the top of form1,
of this class, we have partialy completed.

using ByteOrderInOut;

Double click our button1 in form1 to go to its code area.  There we will create a method to open a file, and then, verify that the user has opened a file, to test
a file on our reader.
*/